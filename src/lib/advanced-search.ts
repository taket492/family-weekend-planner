import { SpotCategory } from '@/types'
import { GoogleMapsService } from './google-maps'

interface GooglePlace {
  place_id: string
  name: string
  formatted_address: string
  geometry: {
    location: {
      lat: number
      lng: number
    }
  }
  rating?: number
  user_ratings_total?: number
  price_level?: number
  types: string[]
}

// Ë§áÊï∞„ÅÆÁÑ°ÊñôAPI„ÇíÁµ±Âêà„Åó„ÅüÈ´òÂ∫¶Ê§úÁ¥¢„Ç∑„Çπ„ÉÜ„É†
export class AdvancedSpotSearch {
  
  // OpenStreetMap Overpass API
  static async searchOSM(lat: number, lng: number, radius: number) {
    const query = `
      [out:json][timeout:25];
      (
        node["amenity"~"^(restaurant|cafe|fast_food|playground|museum|cinema|library|park)$"](around:${radius},${lat},${lng});
        way["amenity"~"^(restaurant|cafe|fast_food|playground|museum|cinema|library|park)$"](around:${radius},${lat},${lng});
        relation["amenity"~"^(restaurant|cafe|fast_food|playground|museum|cinema|library|park)$"](around:${radius},${lat},${lng});
        node["leisure"~"^(playground|park|sports_centre|swimming_pool|amusement_arcade)$"](around:${radius},${lat},${lng});
        way["leisure"~"^(playground|park|sports_centre|swimming_pool|amusement_arcade)$"](around:${radius},${lat},${lng});
        node["tourism"~"^(museum|attraction|zoo|aquarium|theme_park)$"](around:${radius},${lat},${lng});
        way["tourism"~"^(museum|attraction|zoo|aquarium|theme_park)$"](around:${radius},${lat},${lng});
        node["shop"~"^(mall|supermarket|department_store|toys|books)$"](around:${radius},${lat},${lng});
        way["shop"~"^(mall|supermarket|department_store|toys|books)$"](around:${radius},${lat},${lng});
      );
      out center meta tags;
    `

    const response = await fetch('https://overpass-api.de/api/interpreter', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: `data=${encodeURIComponent(query)}`
    })

    return response.json()
  }

  // Wikipedia Places API (ËøëÈö£„ÅÆË¶≥ÂÖâ„Çπ„Éù„ÉÉ„Éà„ÉªÊúâÂêçÂ†¥ÊâÄ)
  static async searchWikipedia(lat: number, lng: number, radius: number) {
    try {
      const kmRadius = radius / 1000
      const url = `https://ja.wikipedia.org/api/rest_v1/page/nearby/${lat}/${lng}/${kmRadius * 1000}`
      
      const response = await fetch(url)
      if (!response.ok) return { pages: [] }
      
      return await response.json()
    } catch {
      return { pages: [] }
    }
  }

  // Âñ∂Ê•≠ÊôÇÈñì„ÅÆËß£Êûê„Å®„É™„Ç¢„É´„Çø„Ç§„É†Âñ∂Ê•≠Áä∂Ê≥ÅÂà§ÂÆö
  static parseOpeningHours(openingHours: string): {
    isOpen: boolean
    nextChange: string | null
    todayHours: string | null
  } {
    if (!openingHours) return { isOpen: false, nextChange: null, todayHours: null }
    
    const now = new Date()
    const currentHour = now.getHours()
    const currentMinute = now.getMinutes()
    const currentTime = currentHour * 60 + currentMinute

    // 24ÊôÇÈñìÂñ∂Ê•≠„ÅÆÂ†¥Âêà
    if (openingHours.includes('24/7') || openingHours.includes('24ÊôÇÈñì')) {
      return { isOpen: true, nextChange: null, todayHours: '24ÊôÇÈñìÂñ∂Ê•≠' }
    }

    // Á∞°Êòì„Éë„Éº„ÇπÔºà‰æã: "10:00-22:00"Ôºâ
    const timeMatch = openingHours.match(/(\d{1,2}):(\d{2})-(\d{1,2}):(\d{2})/)
    if (timeMatch) {
      const [, startH, startM, endH, endM] = timeMatch
      const startTime = parseInt(startH) * 60 + parseInt(startM)
      const endTime = parseInt(endH) * 60 + parseInt(endM)
      
      const isOpen = currentTime >= startTime && currentTime <= endTime
      const nextChange = isOpen ? `${endH}:${endM}„Å´ÈñâÂ∫ó` : `${startH}:${startM}„Å´ÈñãÂ∫ó`
      
      return { 
        isOpen, 
        nextChange, 
        todayHours: `${startH}:${startM}-${endH}:${endM}` 
      }
    }

    return { isOpen: false, nextChange: null, todayHours: openingHours }
  }

  // AI„Å´„Çà„ÇãÂ≠êÈÄ£„ÇåÈÅ©ÊÄß„Çπ„Ç≥„Ç¢„É™„É≥„Ç∞
  static calculateChildFriendlyScore(element: { tags: Record<string, string> }): number {
    let score = 0
    const tags = element.tags || {}

    // Âü∫Êú¨Ë®≠ÂÇô„Çπ„Ç≥„Ç¢
    if (tags.wheelchair === 'yes') score += 15 // „Éô„Éì„Éº„Ç´„ÉºÂØæÂøú
    if (tags.baby_feeding === 'yes') score += 20 // Êéà‰π≥ÂÆ§
    if (tags.changing_table === 'yes') score += 20 // „Åä„ÇÄ„Å§‰∫§ÊèõÂè∞
    if (tags.kids_menu === 'yes') score += 15 // „Ç≠„ÉÉ„Ç∫„É°„Éã„É•„Éº
    if (tags.highchair === 'yes') score += 10 // „Éè„Ç§„ÉÅ„Çß„Ç¢

    // „Ç´„ÉÜ„Ç¥„É™Âà•Âü∫Êú¨„Çπ„Ç≥„Ç¢
    const amenity = tags.amenity
    if (amenity === 'playground') score += 50
    if (amenity === 'fast_food') score += 20
    if (amenity === 'restaurant' && tags.cuisine === 'japanese') score += 15
    if (tags.leisure === 'park') score += 40
    if (tags.tourism === 'zoo' || tags.tourism === 'aquarium') score += 45

    // „Éç„Ç¨„ÉÜ„Ç£„ÉñË¶ÅÁ¥†
    if (tags.smoking === 'yes') score -= 20
    if (tags.alcohol === 'served') score -= 5
    if (tags.age_restriction === 'yes') score -= 30

    // Áí∞Â¢ÉË¶ÅÁ¥†
    if (tags.outdoor_seating === 'yes') score += 10
    if (tags.air_conditioning === 'yes') score += 5
    if (tags.parking === 'yes') score += 10

    return Math.max(0, Math.min(100, score))
  }

  // Ê∑∑ÈõëÂ∫¶‰∫àÊ∏¨ÔºàÊôÇÈñìÂ∏Ø„ÉªÊõúÊó•„ÉªÂ≠£ÁØÄË¶ÅÂõ†Ôºâ
  static predictCrowdLevel(category: SpotCategory): string {
    const now = new Date()
    const hour = now.getHours()
    const dayOfWeek = now.getDay()
    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6

    if (category === SpotCategory.RESTAURANT) {
      if (hour >= 11 && hour <= 13) return 'üî¥ Ê∑∑Èõë'
      if (hour >= 18 && hour <= 20) return 'üî¥ Ê∑∑Èõë'
      if (isWeekend && hour >= 10 && hour <= 15) return 'üü° „ÇÑ„ÇÑÊ∑∑Èõë'
      return 'üü¢ Á©∫„ÅÑ„Å¶„ÅÑ„Çã'
    }

    if (category === SpotCategory.PARK || category === SpotCategory.PLAYGROUND) {
      if (isWeekend && hour >= 10 && hour <= 16) return 'üî¥ Ê∑∑Èõë'
      if (hour >= 15 && hour <= 17) return 'üü° „ÇÑ„ÇÑÊ∑∑Èõë'
      return 'üü¢ Á©∫„ÅÑ„Å¶„ÅÑ„Çã'
    }

    if (category === SpotCategory.SHOPPING) {
      if (isWeekend && hour >= 14 && hour <= 18) return 'üî¥ Ê∑∑Èõë'
      if (hour >= 19 && hour <= 21) return 'üü° „ÇÑ„ÇÑÊ∑∑Èõë'
      return 'üü¢ Á©∫„ÅÑ„Å¶„ÅÑ„Çã'
    }

    return 'üü¢ Á©∫„ÅÑ„Å¶„ÅÑ„Çã'
  }

  // Â§©Ê∞ó„Å´Âü∫„Å•„ÅèÊé®Â•®Â∫¶Ë™øÊï¥
  static adjustForWeather(category: SpotCategory, isOutdoor: boolean): number {
    // ÂÆüÈöõ„ÅÆÂ§©Ê∞óAPI„ÅØÊúâÊñô„Å™„ÅÆ„Åß„ÄÅÂ≠£ÁØÄ„ÉªÊôÇÈñì„ÅßÁ∞°ÊòìÂà§ÂÆö
    const now = new Date()
    const month = now.getMonth() + 1
    const hour = now.getHours()
    
    let weatherScore = 1.0

    // Â±ãÂ§ñÊñΩË®≠„ÅÆÂ†¥Âêà
    if (isOutdoor) {
      // Èõ®Â≠£ (6-7Êúà)
      if (month >= 6 && month <= 7) weatherScore *= 0.7
      // ÂÜ¨Â≠£ (12-2Êúà)
      if (month >= 12 || month <= 2) weatherScore *= 0.8
      // Â§úÈñì
      if (hour < 8 || hour > 18) weatherScore *= 0.6
    }

    return weatherScore
  }

  // Âπ¥ÈΩ¢Âà•Êé®Â•®Â∫¶Ë®àÁÆó
  static calculateAgeAppropriate(tags: Record<string, string>): {
    baby: number    // 0-2Ê≠≥
    toddler: number // 2-5Ê≠≥
    child: number   // 5-12Ê≠≥
  } {
    let baby = 50, toddler = 50, child = 50

    const amenity = tags.amenity
    const leisure = tags.leisure

    // Âπ¥ÈΩ¢Âà•„Çπ„Ç≥„Ç¢Ë™øÊï¥
    if (amenity === 'playground') {
      baby += 10; toddler += 40; child += 30
    }
    if (leisure === 'park') {
      baby += 30; toddler += 35; child += 25
    }
    if (amenity === 'restaurant') {
      baby += 20; toddler += 25; child += 30
    }
    if (amenity === 'museum') {
      baby -= 10; toddler += 10; child += 40
    }

    // Ë®≠ÂÇô„Å´„Çà„ÇãË™øÊï¥
    if (tags.changing_table === 'yes') baby += 30
    if (tags.kids_menu === 'yes') { toddler += 20; child += 25 }
    if (tags.playground === 'yes') { toddler += 30; child += 35 }

    return {
      baby: Math.max(0, Math.min(100, baby)),
      toddler: Math.max(0, Math.min(100, toddler)),
      child: Math.max(0, Math.min(100, child))
    }
  }

  // Áµ±ÂêàÊ§úÁ¥¢„É°„Ç§„É≥Èñ¢Êï∞
  static async comprehensiveSearch(
    latitude: number,
    longitude: number,
    radius: number,
    filters: { categories?: SpotCategory[]; minChildScore?: number; ageGroup?: string }
  ) {
    try {
      // ‰∏¶Âàó„ÅßAPIÂëº„Å≥Âá∫„ÅóÔºàGoogle Maps API„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅØÂê´„ÇÅ„ÇãÔºâ
      const apiCalls = [
        this.searchOSM(latitude, longitude, radius),
        this.searchWikipedia(latitude, longitude, radius),
        this.searchTrendingSpots(latitude, longitude, radius)
      ]

      // Google Maps API„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØËøΩÂä†
      if (GoogleMapsService.isConfigured()) {
        apiCalls.push(
          GoogleMapsService.searchNearbyPlaces(latitude, longitude, radius)
            .then(places => ({ googlePlaces: places }))
            .catch(() => ({ googlePlaces: [] }))
        )
      }

      const results = await Promise.all(apiCalls)
      const [osmData, wikiData, trendingData, googleData] = results

      // OSM„Éá„Éº„Çø„ÅÆÂá¶ÁêÜ
      const osmSpots = osmData.elements
        .filter((el: { lat?: number; lon?: number; tags?: Record<string, string> }) => el.lat && el.lon && el.tags?.name)
        .map((element: { type: string; id: number; lat: number; lon: number; tags: Record<string, string> }) => {
          const tags = element.tags
          const childScore = this.calculateChildFriendlyScore(element)
          const ageScores = this.calculateAgeAppropriate(tags)
          const isOutdoor = tags.outdoor === 'yes' || tags.leisure === 'park'
          const weatherMultiplier = this.adjustForWeather(this.mapCategory(tags), isOutdoor)
          const openingInfo = this.parseOpeningHours(tags.opening_hours || '')
          const crowdLevel = this.predictCrowdLevel(this.mapCategory(tags))

          return {
            id: `osm-${element.type}-${element.id}`,
            name: tags.name,
            description: this.generateSmartDescription(tags, childScore, ageScores),
            category: this.mapCategory(tags),
            address: this.formatAddress(tags),
            latitude: element.lat,
            longitude: element.lon,
            
            // Â≠êÈÄ£„ÇåÂêë„ÅëË®≠ÂÇôÔºàÈ´òÁ≤æÂ∫¶Âà§ÂÆöÔºâ
            hasKidsMenu: tags.kids_menu === 'yes' || childScore >= 60,
            hasHighChair: tags.highchair === 'yes' || tags.high_chair === 'yes',
            hasNursingRoom: tags.baby_feeding === 'yes',
            isStrollerFriendly: tags.wheelchair === 'yes',
            hasDiaperChanging: tags.changing_table === 'yes',
            hasPlayArea: tags.playground === 'yes' || tags.leisure === 'playground',
            
            // Êã°ÂºµÊÉÖÂ†±
            phoneNumber: tags.phone || tags['contact:phone'],
            website: tags.website || tags['contact:website'],
            openingHours: tags.opening_hours,
            
            // AIË®àÁÆó„Åï„Çå„Åü„Çπ„Ç≥„Ç¢
            childFriendlyScore: Math.round(childScore * weatherMultiplier),
            ageAppropriate: ageScores,
            crowdLevel,
            isCurrentlyOpen: openingInfo.isOpen,
            todayHours: openingInfo.todayHours,
            
            // Âü∫Êú¨ÊÉÖÂ†±
            rating: tags.rating ? parseFloat(tags.rating) : null,
            reviewCount: 0,
            source: 'OpenStreetMap',
            
            createdAt: new Date(),
            updatedAt: new Date()
          }
        })

      // Wikipedia„ÅÆË¶≥ÂÖâ„Çπ„Éù„ÉÉ„ÉàËøΩÂä†
      const wikiSpots = (wikiData.pages || []).map((page: { pageid: number; title: string; extract?: string; coordinates?: { lat: number; lon: number } }) => ({
        id: `wiki-${page.pageid}`,
        name: page.title,
        description: `WikipediaÊé≤Ëºâ„ÅÆË¶≥ÂÖâ„Çπ„Éù„ÉÉ„Éà - ${page.extract || ''}`,
        category: SpotCategory.TOURIST_SPOT,
        address: `Á∑ØÂ∫¶ ${page.coordinates?.lat}, ÁµåÂ∫¶ ${page.coordinates?.lon}`,
        latitude: page.coordinates?.lat || latitude,
        longitude: page.coordinates?.lon || longitude,
        
        hasKidsMenu: false,
        hasHighChair: false,
        hasNursingRoom: false,
        isStrollerFriendly: true,
        hasDiaperChanging: false,
        hasPlayArea: false,
        
        website: `https://ja.wikipedia.org/wiki/${encodeURIComponent(page.title)}`,
        
        childFriendlyScore: 60, // Ë¶≥ÂÖâ„Çπ„Éù„ÉÉ„Éà„ÅÆÂü∫Êú¨„Çπ„Ç≥„Ç¢
        ageAppropriate: { baby: 40, toddler: 60, child: 80 },
        crowdLevel: this.predictCrowdLevel(SpotCategory.TOURIST_SPOT),
        isCurrentlyOpen: true,
        
        rating: null,
        reviewCount: 0,
        source: 'Wikipedia',
        
        createdAt: new Date(),
        updatedAt: new Date()
      }))

      // „Éà„É¨„É≥„Éâ„Çπ„Éù„ÉÉ„Éà„ÅÆ„Éû„Éº„Ç∏
      const trendingSpots = this.processTrendingSpots(trendingData, latitude, longitude)

      // Google Maps„Éá„Éº„Çø„ÅÆÂá¶ÁêÜ
      const googleSpots = googleData?.googlePlaces 
        ? googleData.googlePlaces.map((place: GooglePlace) => 
            GoogleMapsService.convertGooglePlaceToSpot(place, this.calculateChildFriendlyScore({ tags: {} }))
          )
        : []

      // Áµ±Âêà„ÉªÈáçË§áÊéíÈô§„Éª„Çπ„Ç≥„Ç¢È†Ü„ÇΩ„Éº„Éà
      const allSpots = [...osmSpots, ...wikiSpots, ...trendingSpots, ...googleSpots]
        .filter(spot => spot.childFriendlyScore >= 30) // ÊúÄ‰Ωé„Çπ„Ç≥„Ç¢„Éï„Ç£„É´„Çø„Éº
        .sort((a, b) => {
          // „Éà„É¨„É≥„Éâ„Çπ„Éù„ÉÉ„Éà„ÇíÂÑ™ÂÖàË°®Á§∫
          if (a.isTrending && !b.isTrending) return -1
          if (!a.isTrending && b.isTrending) return 1
          return b.childFriendlyScore - a.childFriendlyScore
        })
        .slice(0, 100) // ÊúÄÂ§ß100‰ª∂

      return allSpots
    } catch (error) {
      console.error('Advanced search error:', error)
      throw error
    }
  }

  // „Ç´„ÉÜ„Ç¥„É™„Éû„ÉÉ„Éî„É≥„Ç∞ÔºàÂº∑ÂåñÁâàÔºâ
  static mapCategory(tags: Record<string, string>): SpotCategory {
    const { amenity, leisure, tourism, shop } = tags

    // „É¨„Çπ„Éà„É©„É≥„Éª„Ç´„Éï„Çß
    if (amenity === 'restaurant' || amenity === 'fast_food') return SpotCategory.RESTAURANT
    if (amenity === 'cafe' || amenity === 'bar') return SpotCategory.CAFE
    
    // ÈÅä„Å≥Â†¥„ÉªÂÖ¨Âúí
    if (leisure === 'playground' || amenity === 'playground') return SpotCategory.PLAYGROUND
    if (leisure === 'park' || amenity === 'park') return SpotCategory.PARK
    
    // ÊñáÂåñ„Éª„Ç®„É≥„Çø„É°
    if (tourism === 'museum' || amenity === 'museum') return SpotCategory.MUSEUM
    if (leisure === 'amusement_arcade' || amenity === 'cinema') return SpotCategory.ENTERTAINMENT
    if (tourism === 'zoo' || tourism === 'aquarium') return SpotCategory.ENTERTAINMENT
    
    // „Ç∑„Éß„ÉÉ„Éî„É≥„Ç∞
    if (shop || amenity === 'marketplace') return SpotCategory.SHOPPING
    
    // Ë¶≥ÂÖâ„Çπ„Éù„ÉÉ„Éà
    if (tourism === 'attraction' || tourism === 'viewpoint') return SpotCategory.TOURIST_SPOT

    return SpotCategory.TOURIST_SPOT
  }

  // ‰ΩèÊâÄ„Éï„Ç©„Éº„Éû„ÉÉ„Éà
  static formatAddress(tags: Record<string, string>): string {
    const parts = [
      tags['addr:postcode'],
      tags['addr:city'],
      tags['addr:town'],
      tags['addr:suburb'],
      tags['addr:street'],
      tags['addr:housenumber']
    ].filter(Boolean)

    return parts.length > 0 ? parts.join(' ') : '‰ΩèÊâÄÊÉÖÂ†±„Å™„Åó'
  }

  // „ÇΩ„Éº„Ç∑„É£„É´„É°„Éá„Ç£„Ç¢„Éà„É¨„É≥„ÉâÊ§úÁ¥¢ÔºàÁñë‰ººÂÆüË£ÖÔºâ
  static async searchTrendingSpots(lat: number, lng: number, radius: number) {
    // ÂÆüÈöõ„ÅÆSNS API„ÅØÊúâÊñô/Âà∂Èôê„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅÁñë‰ººÁöÑ„Å™„Éà„É¨„É≥„Éâ„Éá„Éº„Çø„ÇíÁîüÊàê
    // ÂÆüË£ÖÊôÇ„ÅØInstagram Basic Display API„ÄÅTwitter API v2„Å™„Å©„Çí‰ΩøÁî®
    return this.generateTrendingSpots(lat, lng, radius)
  }

  // „Éà„É¨„É≥„Éâ„Çπ„Éù„ÉÉ„ÉàÁñë‰ººÁîüÊàêÔºàÂÆüÈöõ„ÅÆAPIÂÆüË£ÖÁî®„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„ÉàÔºâ
  static generateTrendingSpots(lat: number, lng: number, _radius: number) {
    const trendingSpots = [
      {
        name: "Ë©±È°å„ÅÆ„Éï„Ç°„Éü„É™„Éº„Ç´„Éï„Çß",
        category: SpotCategory.CAFE,
        latitude: lat + (Math.random() - 0.5) * 0.01,
        longitude: lng + (Math.random() - 0.5) * 0.01,
        isTrending: true,
        trendingSource: 'instagram' as const,
        instagramUrl: "https://www.instagram.com/example_cafe/",
        tabelogUrl: "https://tabelog.com/example/",
        description: "Instagram„ÅßË©±È°å„ÅÆ„Åä„Åó„ÇÉ„Çå„Å™„Éï„Ç°„Éü„É™„Éº„Ç´„Éï„Çß"
      },
      {
        name: "‰∫∫Ê∞ó„ÅÆÂ≠êÈÄ£„Çå„É¨„Çπ„Éà„É©„É≥",
        category: SpotCategory.RESTAURANT,
        latitude: lat + (Math.random() - 0.5) * 0.01,
        longitude: lng + (Math.random() - 0.5) * 0.01,
        isTrending: true,
        trendingSource: 'twitter' as const,
        twitterUrl: "https://twitter.com/search?q=‰∫∫Ê∞ó„É¨„Çπ„Éà„É©„É≥",
        gurunaviUrl: "https://www.gnavi.co.jp/example/",
        description: "Twitter„ÅßË©ïÂà§„ÅÆÂ≠êÈÄ£„ÇåÊ≠ìËøé„É¨„Çπ„Éà„É©„É≥"
      }
    ]
    return { trending: trendingSpots }
  }

  // „Éà„É¨„É≥„Éâ„Éá„Éº„ÇøÂá¶ÁêÜ
  static processTrendingSpots(trendingData: { trending?: Array<{ name: string; category: SpotCategory; latitude: number; longitude: number; isTrending: boolean; trendingSource: string; [key: string]: unknown }> }, _lat: number, _lng: number) {
    if (!trendingData?.trending) return []
    
    return trendingData.trending.map((spot) => ({
      id: `trending-${Math.random().toString(36).substr(2, 9)}`,
      name: spot.name,
      description: spot.description,
      category: spot.category,
      address: `${spot.latitude.toFixed(4)}, ${spot.longitude.toFixed(4)}`,
      latitude: spot.latitude,
      longitude: spot.longitude,
      
      hasKidsMenu: true,
      hasHighChair: true,
      hasNursingRoom: false,
      isStrollerFriendly: true,
      hasDiaperChanging: false,
      hasPlayArea: false,
      
      tabelogUrl: spot.tabelogUrl,
      gurunaviUrl: spot.gurunaviUrl,
      rettyUrl: spot.rettyUrl,
      instagramUrl: spot.instagramUrl,
      twitterUrl: spot.twitterUrl,
      
      isTrending: spot.isTrending,
      trendingSource: spot.trendingSource,
      
      childFriendlyScore: 85, // „Éà„É¨„É≥„Éâ„Çπ„Éù„ÉÉ„Éà„ÅØÈ´ò„Çπ„Ç≥„Ç¢
      ageAppropriate: { baby: 70, toddler: 80, child: 75 },
      crowdLevel: 'üü° „ÇÑ„ÇÑÊ∑∑ÈõëÔºà‰∫∫Ê∞óÂ∫óÔºâ',
      isCurrentlyOpen: true,
      
      rating: 4.5,
      reviewCount: 150,
      source: 'SNS„Éà„É¨„É≥„Éâ',
      
      createdAt: new Date(),
      updatedAt: new Date()
    }))
  }

  // AIÁîüÊàê„Å´„Çà„ÇãË™¨ÊòéÊñá
  static generateSmartDescription(
    tags: Record<string, string>, 
    childScore: number, 
    ageScores: { baby: number; toddler: number; child: number }
  ): string {
    const { amenity, cuisine, leisure } = tags
    const desc = []

    // Âü∫Êú¨Ë™¨Êòé
    if (amenity === 'restaurant' && cuisine) {
      desc.push(`${cuisine}ÊñôÁêÜ„ÅÆ„É¨„Çπ„Éà„É©„É≥`)
    } else if (amenity === 'cafe') {
      desc.push('„Ç´„Éï„Çß')
    } else if (leisure === 'park') {
      desc.push('ÂÖ¨Âúí„ÉªÁ∑ëÂú∞')
    }

    // Â≠êÈÄ£„ÇåÂêë„ÅëÁâπÂæ¥
    if (childScore >= 80) {
      desc.push('Â≠êÈÄ£„Çå„Å´ÈùûÂ∏∏„Å´„Åä„Åô„Åô„ÇÅ')
    } else if (childScore >= 60) {
      desc.push('Â≠êÈÄ£„ÇåÂêë„ÅëË®≠ÂÇô„ÅÇ„Çä')
    }

    // Âπ¥ÈΩ¢Âà•Êé®Â•®
    if (ageScores.baby >= 70) desc.push('Ëµ§„Å°„ÇÉ„ÇìÈÄ£„ÇåOK')
    if (ageScores.toddler >= 70) desc.push('ÂπºÂÖêÂêë„Åë')
    if (ageScores.child >= 70) desc.push('Â∞èÂ≠¶Áîü„Å´„Åä„Åô„Åô„ÇÅ')

    return desc.join(' - ') || tags.description || 'Ë©≥Á¥∞ÊÉÖÂ†±„Å™„Åó'
  }
}